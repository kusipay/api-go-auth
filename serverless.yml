service: api-go-auth

frameworkVersion: "3"

provider:
  name: aws
  runtime: provided.al2
  architecture: arm64
  region: ${env:AWS_REGION}
  stage: ${env:STAGE}
  httpApi:
    cors: true
    name: ${self:service}-${self:provider.stage}-api
    authorizers:
      lambdaAuthorizer:
        name: ${self:service}-${self:provider.stage}-lambdaauthorizer
        type: request
        functionName: authorizer
        resultTtlInSeconds: 300
        identitySource:
          - $request.header.Authorization
        enableSimpleResponses: true
        payloadVersion: "2.0"
  environment:
    REGION: ${self:provider.region}
    USER_POOL_ID: !Ref UserPoolCore

package:
  individually: true

custom:
  version: "v1"
  sld: ${env:SECOND_LEVEL_DOMAIN}
  tld: ${env:TOP_LEVEL_DOMAIN}
  prefix: ${self:service}-${self:provider.stage}

functions:
  authorizer:
    handler: bootstrap
    package:
      artifact: bin/authorizer.zip

  endpoint:
    handler: bootstrap
    package:
      artifact: bin/endpoint.zip
    events:
      - httpApi:
          method: GET
          path: /endpoint
          authorizer:
            name: lambdaAuthorizer

resources:
  Conditions:
    IsProd: !Equals ["${self:provider.stage}", "prod"]

  Resources:
    UserPoolCore:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.prefix}-userpoolcore
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email ## admin_only | verified_email | verified_phone_number
              Priority: 1
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        DeletionProtection: ACTIVE
        MfaConfiguration: "OFF"
        UsernameConfiguration:
          CaseSensitive: false
        AliasAttributes: ## phone_number | email | preferred_username
          - preferred_username
          - email
          - phone_number
        AutoVerifiedAttributes: ## phone_number | email
          - email
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate:
            - email

    UserPoolClientPublic:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPoolCore # Reference to your UserPool
        ClientName: ${self:custom.prefix}-publicclient
        GenerateSecret: false
        PreventUserExistenceErrors: ENABLED
        EnableTokenRevocation: true
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders:
          - COGNITO
        ExplicitAuthFlows:
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
          - email
          - profile
          - phone
        CallbackURLs:
          - "https://${self:provider.stage}.${self:custom.sld}.${self:custom.tld}"
          - "https://${self:custom.sld}.${self:custom.tld}"
          - "http://localhost:5173"

    UserPoolDomainCognito:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: "${self:custom.prefix}-1693780558"
        UserPoolId: !Ref UserPoolCore

  Outputs:
    Description: "Authorizer lambda arn"
    Value: !GetAtt AuthorizerLambdaFunction.Arn
    Export:
      Name: ${self:custom.prefix}-authorizer
